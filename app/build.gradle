import groovy.xml.Namespace
import groovy.xml.XmlUtil

apply plugin: 'com.android.application'

android {
    compileSdkVersion 32
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.zhj.bluetooth.sdkdemo"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 5
        versionName "2.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.processResources.doFirst { pm ->
                String manifestPath = output.processResources.manifestFile
                def manifestFile = new File(manifestPath)
                def xml = new XmlParser(false, true).parse(manifestFile)
                def exportedTag = "android:exported"
                ///指定 space
                def androidSpace = new Namespace('http://schemas.android.com/apk/res/android', 'android')
                def nodes = xml.application[0].'*'.findAll {
                    //挑选要修改的节点，没有指定的 exported 的才需要增加
                    (it.name() == 'activity' || it.name() == 'receiver' || it.name() == 'service') && it.attribute(androidSpace.exported) == null
                }
                ///添加 exported，默认 false
                nodes.each {
                    def isMain = false
                    it.each {
                        if (it.name() == "intent-filter") {
                            it.each {
                                if (it.name() == "action") {
                                    if (it.attributes().get(androidSpace.name) == "android.intent.action.MAIN") {
                                        isMain = true
                                    }
                                }
                            }
                        }
                    }
                    it.attributes().put(exportedTag, "${isMain}")
                }
                PrintWriter pw = new PrintWriter(manifestFile)
                pw.write(XmlUtil.serialize(xml))
                pw.close()
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }


    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'app_sdk', ext: 'aar')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //noinspection GradleCompatible
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    api 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    implementation 'no.nordicsemi.android:dfu:1.10.3'

    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    api('com.github.bumptech.glide:glide:4.8.0') {
        exclude group: 'com.android.support'
    }
    api 'io.reactivex.rxjava2:rxjava:2.1.2'
    api 'androidx.work:work-runtime:2.7.1'

    api 'com.google.code.gson:gson:2.8.6'
}
